{"version":3,"sources":["../../src/api/ComposerRuntime.ts"],"sourcesContent":["import { Attachment, PendingAttachment } from \"../types/AttachmentTypes\";\nimport {\n  ComposerRuntimeCore,\n  ThreadComposerRuntimeCore,\n} from \"../runtimes/core/ComposerRuntimeCore\";\nimport { Unsubscribe } from \"../types\";\nimport { SubscribableWithState } from \"./subscribable/Subscribable\";\nimport { LazyMemoizeSubject } from \"./subscribable/LazyMemoizeSubject\";\nimport {\n  AttachmentRuntime,\n  AttachmentState,\n  EditComposerAttachmentRuntimeImpl,\n  ThreadComposerAttachmentRuntimeImpl,\n} from \"./AttachmentRuntime\";\nimport { ShallowMemoizeSubject } from \"./subscribable/ShallowMemoizeSubject\";\nimport { SKIP_UPDATE } from \"./subscribable/SKIP_UPDATE\";\nimport { ComposerRuntimePath } from \"./RuntimePathTypes\";\nimport { MessageRole } from \"../types/AssistantTypes\";\n\nexport type ThreadComposerRuntimeCoreBinding = SubscribableWithState<\n  ThreadComposerRuntimeCore | undefined,\n  ComposerRuntimePath & { composerSource: \"thread\" }\n>;\n\nexport type EditComposerRuntimeCoreBinding = SubscribableWithState<\n  ComposerRuntimeCore | undefined,\n  ComposerRuntimePath & { composerSource: \"edit\" }\n>;\n\nexport type ComposerRuntimeCoreBinding = SubscribableWithState<\n  ComposerRuntimeCore | undefined,\n  ComposerRuntimePath\n>;\n\ntype LegacyEditComposerState = Readonly<{\n  type: \"edit\";\n\n  /** @deprecated Use `text` instead. This will be removed in 0.6.0. */\n  value: string;\n  /** @deprecated Use `useComposerRuntime().setText()` instead. This will be removed in 0.6.0. */\n  setValue: (value: string) => void;\n\n  text: string;\n  /**\n   * @deprecated Use `useComposerRuntime().setText()` instead. This will be removed in 0.6.0.\n   */\n  setText: (value: string) => void;\n\n  canCancel: boolean;\n  isEditing: boolean;\n  isEmpty: boolean;\n\n  /**\n   * @deprecated Use useComposerRuntime().beginEdit() instead. This will be removed in 0.6.0.\n   */\n  edit: () => void;\n  /**\n   * @deprecated Use `useComposerRuntime().send()` instead. This will be removed in 0.6.0.\n   */\n  send: () => void;\n  /**\n   * @deprecated Use `useComposerRuntime().cancel()` instead. This will be removed in 0.6.0.\n   */\n  cancel: () => void;\n}>;\n\ntype LegacyThreadComposerState = Readonly<{\n  type: \"thread\";\n\n  /** @deprecated Use `text` instead. This will be removed in 0.6.0. */\n  value: string;\n  /** @deprecated Use `useComposerRuntime().setText` instead. This will be removed in 0.6.0. */\n  setValue: (value: string) => void;\n\n  attachments: readonly Attachment[];\n\n  /** @deprecated Use `useComposerRuntime().addAttachment` instead. This will be removed in 0.6.0. */\n  addAttachment: (file: File) => Promise<void>;\n  /** @deprecated Use `useComposerRuntime().removeAttachment` instead. This will be removed in 0.6.0. */\n  removeAttachment: (attachmentId: string) => Promise<void>;\n\n  text: string;\n  /** @deprecated Use `useComposerRuntime().setText` instead. This will be removed in 0.6.0. */\n  setText: (value: string) => void;\n\n  /** @deprecated Use `useComposerRuntime().reset` instead. This will be removed in 0.6.0. */\n  reset: () => void;\n\n  canCancel: boolean;\n  isEditing: boolean;\n  isEmpty: boolean;\n\n  /**\n   * @deprecated Use `useComposerRuntime().send` instead. This will be removed in 0.6.0.\n   **/\n  send: () => void;\n  /** @deprecated Use `useComposerRuntime().cancel` instead. This will be removed in 0.6.0. */\n  cancel: () => void;\n}>;\n\ntype BaseComposerState = {\n  text: string;\n  role: MessageRole;\n  attachments: readonly Attachment[];\n\n  canCancel: boolean;\n  isEditing: boolean;\n  isEmpty: boolean;\n};\n\nexport type ThreadComposerState = LegacyThreadComposerState &\n  BaseComposerState & {\n    type: \"thread\";\n\n    attachments: readonly PendingAttachment[];\n  };\n\nexport type EditComposerState = LegacyEditComposerState &\n  BaseComposerState & {\n    type: \"edit\";\n  };\n\nexport type ComposerState = ThreadComposerState | EditComposerState;\n\nconst METHOD_NOT_SUPPORTED = () => {\n  throw new Error(\"Composer is not available\");\n};\nconst EMPTY_ARRAY = Object.freeze([]);\nconst getThreadComposerState = (\n  runtime: ThreadComposerRuntimeCore | undefined,\n): ThreadComposerState => {\n  return Object.freeze({\n    type: \"thread\",\n\n    isEditing: runtime?.isEditing ?? false,\n    canCancel: runtime?.canCancel ?? false,\n    isEmpty: runtime?.isEmpty ?? true,\n    text: runtime?.text ?? \"\",\n    attachments: runtime?.attachments ?? EMPTY_ARRAY,\n    role: runtime?.role ?? \"user\",\n\n    value: runtime?.text ?? \"\",\n    setValue: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    setText: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    // edit: beginEdit,\n    send: runtime?.send.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    cancel: runtime?.cancel.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    reset: runtime?.reset.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n\n    addAttachment: runtime?.addAttachment.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    removeAttachment:\n      runtime?.removeAttachment.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n  });\n};\n\nconst getEditComposerState = (\n  runtime: ComposerRuntimeCore | undefined,\n  beginEdit: () => void,\n): EditComposerState => {\n  return Object.freeze({\n    type: \"edit\",\n\n    isEditing: runtime?.isEditing ?? false,\n    canCancel: runtime?.canCancel ?? false,\n    isEmpty: runtime?.isEmpty ?? true,\n    text: runtime?.text ?? \"\",\n    attachments: runtime?.attachments ?? EMPTY_ARRAY,\n    role: runtime?.role ?? \"user\",\n\n    value: runtime?.text ?? \"\",\n    setValue: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    setText: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    edit: beginEdit,\n    send: runtime?.send.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n    cancel: runtime?.cancel.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n  });\n};\n\nexport type ComposerRuntime = {\n  path: ComposerRuntimePath;\n  readonly type: \"edit\" | \"thread\";\n  getState(): ComposerState;\n\n  /** @deprecated Use `getState().isEditing` instead. This will be removed in 0.6.0. */\n  readonly isEditing: boolean;\n\n  /** @deprecated Use `getState().isEmpty` instead. This will be removed in 0.6.0. */\n  readonly isEmpty: boolean;\n\n  /** @deprecated Use `getState().canCancel` instead. This will be removed in 0.6.0. */\n  readonly canCancel: boolean;\n\n  /** @deprecated Use `getState().text` instead. This will be removed in 0.6.0. */\n  readonly text: string;\n\n  /** @deprecated Use `getState().attachments` instead. This will be removed in 0.6.0. */\n  readonly attachments: readonly Attachment[];\n\n  /** @deprecated Use `getState().text` instead. This will be removed in 0.6.0. */\n  readonly value: string;\n\n  setText(text: string): void;\n  setValue(text: string): void;\n\n  getAttachmentAccept(): string;\n  addAttachment(file: File): Promise<void>;\n\n  /** @deprecated Use `getAttachmentById(id).removeAttachment()` instead. This will be removed in 0.6.0. */\n  removeAttachment(attachmentId: string): Promise<void>;\n\n  /** @deprecated This method will be removed in 0.6.0. Submit feedback if you need this functionality. */\n  reset(): void;\n\n  send(): void;\n  cancel(): void;\n  subscribe(callback: () => void): Unsubscribe;\n  getAttachmentByIndex(idx: number): AttachmentRuntime;\n};\n\nexport abstract class ComposerRuntimeImpl\n  implements ComposerRuntimeCore, ComposerRuntime\n{\n  public get path() {\n    return this._core.path;\n  }\n\n  public abstract get type(): \"edit\" | \"thread\";\n\n  constructor(protected _core: ComposerRuntimeCoreBinding) {}\n\n  /**\n   * @deprecated Use `getState().isEditing` instead. This will be removed in 0.6.0.\n   */\n  public get isEditing() {\n    return this.getState().isEditing;\n  }\n\n  /**\n   * @deprecated Use `getState().isEmpty` instead. This will be removed in 0.6.0.\n   */\n  public get isEmpty() {\n    return this.getState().isEmpty;\n  }\n\n  /**\n   * @deprecated Use `getState().canCancel` instead. This will be removed in 0.6.0.\n   */\n  public get canCancel() {\n    return this.getState().canCancel;\n  }\n\n  /**\n   * @deprecated Use `getState().text` instead. This will be removed in 0.6.0.\n   */\n  public get text() {\n    return this.getState().text;\n  }\n\n  /**\n   * @deprecated Use `getState().role` instead. This will be removed in 0.6.0.\n   */\n  public get role() {\n    return this.getState().role;\n  }\n\n  /**\n   * @deprecated Use `getState().attachments` instead. This will be removed in 0.6.0.\n   */\n  public get attachments() {\n    return this.getState().attachments;\n  }\n\n  /**\n   * @deprecated Use `getState().text` instead. This will be removed in 0.6.0.\n   */\n  public get value() {\n    return this.text;\n  }\n\n  public abstract getState(): ComposerState;\n\n  public setText(text: string) {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    core.setText(text);\n  }\n\n  public setValue(text: string) {\n    this.setText(text);\n  }\n\n  public addAttachment(file: File) {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    return core.addAttachment(file);\n  }\n\n  /**\n   * @deprecated Use `getAttachmentById(id).removeAttachment()` instead. This will be removed in 0.6.0.\n   */\n  public removeAttachment(attachmentId: string) {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    return core.removeAttachment(attachmentId);\n  }\n\n  /**\n   * @deprecated This method will be removed in 0.6.0. Submit feedback if you need this functionality.\n   */\n  public reset() {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    core.reset();\n  }\n\n  public send() {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    core.send();\n  }\n\n  public cancel() {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    core.cancel();\n  }\n\n  public setRole(role: MessageRole) {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    core.setRole(role);\n  }\n\n  public subscribe(callback: () => void) {\n    return this._core.subscribe(callback);\n  }\n\n  public getAttachmentAccept(): string {\n    const core = this._core.getState();\n    if (!core) throw new Error(\"Composer is not available\");\n    return core.getAttachmentAccept();\n  }\n\n  public abstract getAttachmentByIndex(idx: number): AttachmentRuntime;\n}\n\nexport type ThreadComposerRuntime = Omit<\n  ComposerRuntime,\n  \"getState\" | \"getAttachmentByIndex\"\n> & {\n  readonly path: ComposerRuntimePath & { composerSource: \"thread\" };\n  readonly type: \"thread\";\n  getState(): ThreadComposerState;\n\n  /**\n   * @deprecated Use `getState().attachments` instead. This will be removed in 0.6.0.\n   */\n  attachments: readonly PendingAttachment[];\n\n  getAttachmentByIndex(\n    idx: number,\n  ): AttachmentRuntime & { source: \"thread-composer\" };\n};\n\nexport class ThreadComposerRuntimeImpl\n  extends ComposerRuntimeImpl\n  implements ThreadComposerRuntime, ThreadComposerState\n{\n  public override get path() {\n    return this._core.path as ComposerRuntimePath & {\n      composerSource: \"thread\";\n    };\n  }\n\n  public get type() {\n    return \"thread\" as const;\n  }\n\n  private _getState;\n\n  constructor(core: ThreadComposerRuntimeCoreBinding) {\n    const stateBinding = new LazyMemoizeSubject({\n      path: core.path,\n      getState: () => getThreadComposerState(core.getState()),\n      subscribe: (callback) => core.subscribe(callback),\n    });\n    super({\n      path: core.path,\n      getState: () => core.getState(),\n      subscribe: (callback) => stateBinding.subscribe(callback),\n    });\n    this._getState = stateBinding.getState.bind(stateBinding);\n  }\n\n  public override get attachments() {\n    return this.getState()?.attachments ?? EMPTY_ARRAY;\n  }\n\n  public override getState(): ThreadComposerState {\n    return this._getState();\n  }\n\n  public getAttachmentByIndex(idx: number) {\n    return new ThreadComposerAttachmentRuntimeImpl(\n      new ShallowMemoizeSubject({\n        path: {\n          ...this.path,\n          attachmentSource: \"thread-composer\",\n          attachmentSelector: { type: \"index\", index: idx },\n          ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`,\n        },\n        getState: () => {\n          const attachments = this.getState().attachments;\n          const attachment = attachments[idx];\n          if (!attachment) return SKIP_UPDATE;\n\n          return {\n            ...attachment,\n            attachment: attachment,\n            source: \"thread-composer\",\n          } satisfies AttachmentState & { source: \"thread-composer\" };\n        },\n        subscribe: (callback) => this._core.subscribe(callback),\n      }),\n      this._core,\n    );\n  }\n}\n\nexport type EditComposerRuntime = Omit<\n  ComposerRuntime,\n  \"getState\" | \"getAttachmentByIndex\"\n> & {\n  readonly path: ComposerRuntimePath & { composerSource: \"edit\" };\n  readonly type: \"edit\";\n\n  getState(): EditComposerState;\n  beginEdit(): void;\n\n  /**\n   * @deprecated Use `beginEdit()` instead. This will be removed in 0.6.0.\n   */\n  edit(): void;\n\n  getAttachmentByIndex(\n    idx: number,\n  ): AttachmentRuntime & { source: \"edit-composer\" };\n};\n\nexport class EditComposerRuntimeImpl\n  extends ComposerRuntimeImpl\n  implements EditComposerRuntime, EditComposerState\n{\n  public override get path() {\n    return this._core.path as ComposerRuntimePath & { composerSource: \"edit\" };\n  }\n\n  public get type() {\n    return \"edit\" as const;\n  }\n\n  private _getState;\n  constructor(\n    core: EditComposerRuntimeCoreBinding,\n    private _beginEdit: () => void,\n  ) {\n    const stateBinding = new LazyMemoizeSubject({\n      path: core.path,\n      getState: () => getEditComposerState(core.getState(), this._beginEdit),\n      subscribe: (callback) => core.subscribe(callback),\n    });\n\n    super({\n      path: core.path,\n      getState: () => core.getState(),\n      subscribe: (callback) => stateBinding.subscribe(callback),\n    });\n\n    this._getState = stateBinding.getState.bind(stateBinding);\n  }\n\n  public override getState(): EditComposerState {\n    return this._getState();\n  }\n\n  public beginEdit() {\n    this._beginEdit();\n  }\n\n  /**\n   * @deprecated Use `beginEdit()` instead. This will be removed in 0.6.0.\n   */\n  public edit() {\n    this.beginEdit();\n  }\n\n  public getAttachmentByIndex(idx: number) {\n    return new EditComposerAttachmentRuntimeImpl(\n      new ShallowMemoizeSubject({\n        path: {\n          ...this.path,\n          attachmentSource: \"edit-composer\",\n          attachmentSelector: { type: \"index\", index: idx },\n          ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`,\n        },\n        getState: () => {\n          const attachments = this.getState().attachments;\n          const attachment = attachments[idx];\n          if (!attachment) return SKIP_UPDATE;\n\n          return {\n            ...attachment,\n            attachment: attachment,\n            source: \"edit-composer\",\n          } satisfies AttachmentState & { source: \"edit-composer\" };\n        },\n        subscribe: (callback) => this._core.subscribe(callback),\n      }),\n      this._core,\n    );\n  }\n}\n"],"mappings":"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","names":[]}