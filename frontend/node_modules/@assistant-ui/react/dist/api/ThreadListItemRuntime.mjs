// src/api/ThreadListItemRuntime.ts
var ThreadListItemRuntimeImpl = class {
  constructor(_core, _ThreadListBinding) {
    this._core = _core;
    this._ThreadListBinding = _ThreadListBinding;
  }
  get path() {
    return this._core.path;
  }
  getState() {
    return this._core.getState();
  }
  rename(newTitle) {
    const state = this._core.getState();
    return this._ThreadListBinding.rename(state.threadId, newTitle);
  }
  archive() {
    const state = this._core.getState();
    return this._ThreadListBinding.archive(state.threadId);
  }
  unarchive() {
    const state = this._core.getState();
    return this._ThreadListBinding.unarchive(state.threadId);
  }
  delete() {
    const state = this._core.getState();
    return this._ThreadListBinding.delete(state.threadId);
  }
  subscribe(callback) {
    return this._core.subscribe(callback);
  }
};
export {
  ThreadListItemRuntimeImpl
};
//# sourceMappingURL=ThreadListItemRuntime.mjs.map