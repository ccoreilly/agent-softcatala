{"version":3,"sources":["../../src/api/ThreadRuntime.ts"],"sourcesContent":["import {\n  AddToolResultOptions,\n  ThreadSuggestion,\n  RuntimeCapabilities,\n  SubmitFeedbackOptions,\n  ThreadRuntimeCore,\n  SpeechState,\n  SubmittedFeedback,\n  ThreadRuntimeEventType,\n} from \"../runtimes/core/ThreadRuntimeCore\";\nimport { ExportedMessageRepository } from \"../runtimes/utils/MessageRepository\";\nimport {\n  AppendMessage,\n  ModelConfig,\n  ThreadMessage,\n  Unsubscribe,\n} from \"../types\";\nimport {\n  MessageRuntime,\n  MessageRuntimeImpl,\n  MessageState,\n} from \"./MessageRuntime\";\nimport { NestedSubscriptionSubject } from \"./subscribable/NestedSubscriptionSubject\";\nimport { ShallowMemoizeSubject } from \"./subscribable/ShallowMemoizeSubject\";\nimport {\n  Subscribable,\n  SubscribableWithState,\n} from \"./subscribable/Subscribable\";\nimport {\n  ThreadComposerRuntime,\n  ThreadComposerRuntimeImpl,\n} from \"./ComposerRuntime\";\nimport { LazyMemoizeSubject } from \"./subscribable/LazyMemoizeSubject\";\nimport { SKIP_UPDATE } from \"./subscribable/SKIP_UPDATE\";\nimport { ComposerRuntimeCore } from \"../runtimes/core/ComposerRuntimeCore\";\nimport { MessageRuntimePath, ThreadRuntimePath } from \"./RuntimePathTypes\";\n\nexport type CreateAppendMessage =\n  | string\n  | {\n      parentId?: string | null | undefined;\n      role?: AppendMessage[\"role\"] | undefined;\n      content: AppendMessage[\"content\"];\n      attachments?: AppendMessage[\"attachments\"] | undefined;\n      startRun?: boolean | undefined;\n    };\n\nconst toAppendMessage = (\n  messages: readonly ThreadMessage[],\n  message: CreateAppendMessage,\n): AppendMessage => {\n  if (typeof message === \"string\") {\n    return {\n      parentId: messages.at(-1)?.id ?? null,\n      role: \"user\",\n      content: [{ type: \"text\", text: message }],\n      attachments: [],\n    };\n  }\n\n  if (message.role && message.parentId && message.attachments) {\n    return message as AppendMessage;\n  }\n\n  return {\n    ...message,\n    parentId: message.parentId ?? messages.at(-1)?.id ?? null,\n    role: message.role ?? \"user\",\n    attachments: message.attachments ?? [],\n  } as AppendMessage;\n};\n\nexport type ThreadRuntimeCoreBinding = SubscribableWithState<\n  ThreadRuntimeCore,\n  ThreadRuntimePath\n> & {\n  outerSubscribe(callback: () => void): Unsubscribe;\n};\n\nexport type ThreadState = Readonly<{\n  /**\n   * The thread ID.\n   */\n  threadId: string;\n  /**\n   * Whether the thread is disabled. Disabled threads cannot receive new messages.\n   */\n  isDisabled: boolean;\n\n  /**\n   * Whether the thread is running. A thread is considered running when there is an active stream connection to the backend.\n   */\n  isRunning: boolean;\n\n  /**\n   * The capabilities of the thread, such as whether the thread supports editing, branch switching, etc.\n   */\n  capabilities: RuntimeCapabilities;\n\n  /**\n   * The messages in the currently selected branch of the thread.\n   */\n  messages: readonly ThreadMessage[];\n\n  /**\n   * Follow up message suggestions to show the user.\n   */\n  suggestions: readonly ThreadSuggestion[];\n\n  /**\n   * Custom extra information provided by the runtime.\n   */\n  extras: unknown;\n\n  /**\n   * @deprecated This API is still under active development and might change without notice.\n   */\n  speech: SpeechState | undefined;\n}>;\n\nexport const getThreadState = (runtime: ThreadRuntimeCore): ThreadState => {\n  const lastMessage = runtime.messages.at(-1);\n  return Object.freeze({\n    threadId: runtime.threadId,\n    capabilities: runtime.capabilities,\n    isDisabled: runtime.isDisabled,\n    isRunning:\n      lastMessage?.role !== \"assistant\"\n        ? false\n        : lastMessage.status.type === \"running\",\n    messages: runtime.messages,\n    suggestions: runtime.suggestions,\n    extras: runtime.extras,\n    speech: runtime.speech,\n  });\n};\n\nexport type ThreadRuntime = Readonly<{\n  readonly path: ThreadRuntimePath;\n\n  readonly composer: ThreadComposerRuntime;\n  getState(): ThreadState;\n\n  /**\n   * @deprecated This method will be removed in 0.6.0. Submit feedback if you need this functionality.\n   */\n  unstable_getCore(): ThreadRuntimeCore;\n\n  append(message: CreateAppendMessage): void;\n  startRun(parentId: string | null): void;\n  subscribe(callback: () => void): Unsubscribe;\n  cancelRun(): void;\n  getModelConfig(): ModelConfig;\n  export(): ExportedMessageRepository;\n  import(repository: ExportedMessageRepository): void;\n  getMesssageByIndex(idx: number): MessageRuntime;\n  getMesssageById(messageId: string): MessageRuntime;\n\n  /**\n   * @deprecated This API is still under active development and might change without notice.\n   */\n  stopSpeaking: () => void;\n\n  unstable_on(event: ThreadRuntimeEventType, callback: () => void): Unsubscribe;\n\n  // Legacy methods with deprecations\n\n  /**\n   * @deprecated Use `getState().capabilities` instead. This will be removed in 0.6.0.\n   */\n  capabilities: Readonly<RuntimeCapabilities>;\n\n  /**\n   * @deprecated Use `getState().threadId` instead. This will be removed in 0.6.0.\n   */\n  threadId: string;\n\n  /**\n   * @deprecated Use `getState().isDisabled` instead. This will be removed in 0.6.0.\n   */\n  isDisabled: boolean;\n\n  /**\n   * @deprecated Use `getState().isRunning` instead. This will be removed in 0.6.0.\n   */\n  isRunning: boolean;\n\n  /**\n   * @deprecated Use `getState().messages` instead. This will be removed in 0.6.0.\n   */\n  messages: readonly ThreadMessage[];\n\n  /**\n   * @deprecated Use `getState().followupSuggestions` instead. This will be removed in 0.6.0.\n   */\n  suggestions: readonly ThreadSuggestion[];\n\n  /**\n   * @deprecated Use `getState().speechState` instead. This will be removed in 0.6.0.\n   */\n  speech: SpeechState | undefined;\n\n  /**\n   * @deprecated Use `getState().extras` instead. This will be removed in 0.6.0.\n   */\n  extras: unknown;\n\n  /**\n   * @deprecated Use `getMesssageById(id).getState().branchNumber` / `getMesssageById(id).getState().branchCount` instead. This will be removed in 0.6.0.\n   */\n  getBranches: (messageId: string) => readonly string[];\n\n  /**\n   * @deprecated Use `getMesssageById(id).switchToBranch({ options })` instead. This will be removed in 0.6.0.\n   */\n  switchToBranch: (branchId: string) => void;\n\n  /**\n   * @deprecated Use `getMesssageById(id).getContentPartByToolCallId(toolCallId).addToolResult({ result })` instead. This will be removed in 0.6.0.\n   */\n  addToolResult: (options: AddToolResultOptions) => void;\n\n  /**\n   * @deprecated Use `getMesssageById(id).speak()` instead. This will be removed in 0.6.0.\n   */\n  speak: (messageId: string) => void;\n\n  /**\n   * @deprecated Use `getMesssageById(id).getState().submittedFeedback` instead. This will be removed in 0.6.0.\n   */\n  getSubmittedFeedback: (messageId: string) => SubmittedFeedback | undefined;\n\n  /**\n   * @deprecated Use `getMesssageById(id).submitFeedback({ type })` instead. This will be removed in 0.6.0.\n   */\n  submitFeedback: (feedback: SubmitFeedbackOptions) => void;\n\n  /**\n   * @deprecated Use `getMesssageById(id).composer` instead. This will be removed in 0.6.0.\n   */\n  getEditComposer: (messageId: string) => ComposerRuntimeCore | undefined;\n\n  /**\n   * @deprecated Use `getMesssageById(id).composer.beginEdit()` instead. This will be removed in 0.6.0.\n   */\n  beginEdit: (messageId: string) => void;\n}>;\n\nexport class ThreadRuntimeImpl\n  implements Omit<ThreadRuntimeCore, \"getMessageById\">, ThreadRuntime\n{\n  public get path() {\n    return this._threadBinding.path;\n  }\n\n  /**\n   * @deprecated Use `getState().threadId` instead. This will be removed in 0.6.0.\n   */\n  public get threadId() {\n    return this.getState().threadId;\n  }\n\n  /**\n   * @deprecated Use `getState().isDisabled` instead. This will be removed in 0.6.0.\n   */\n  public get isDisabled() {\n    return this.getState().isDisabled;\n  }\n\n  /**\n   * @deprecated Use `getState().isRunning` instead. This will be removed in 0.6.0.\n   */\n  public get isRunning() {\n    return this.getState().isRunning;\n  }\n\n  /**\n   * @deprecated Use `getState().capabilities` instead. This will be removed in 0.6.0.\n   */\n  public get capabilities() {\n    return this.getState().capabilities;\n  }\n\n  /**\n   * @deprecated Use `getState().extras` instead. This will be removed in 0.6.0.\n   */\n  public get extras() {\n    return this._threadBinding.getState().extras;\n  }\n\n  /**\n   * @deprecated Use `getState().followupSuggestions` instead. This will be removed in 0.6.0.\n   */\n  public get suggestions() {\n    return this._threadBinding.getState().suggestions;\n  }\n\n  /**\n   * @deprecated Use `getState().messages` instead. This will be removed in 0.6.0.\n   */\n  public get messages() {\n    return this._threadBinding.getState().messages;\n  }\n\n  /**\n   * @deprecated Use `getState().speechState` instead. This will be removed in 0.6.0.\n   */\n  public get speech() {\n    return this._threadBinding.getState().speech;\n  }\n\n  public unstable_getCore() {\n    return this._threadBinding.getState();\n  }\n\n  private _threadBinding: ThreadRuntimeCoreBinding & {\n    getStateState(): ThreadState;\n  };\n\n  constructor(threadBinding: ThreadRuntimeCoreBinding) {\n    const stateBinding = new LazyMemoizeSubject({\n      path: threadBinding.path,\n      getState: () => getThreadState(threadBinding.getState()),\n      subscribe: (callback) => threadBinding.subscribe(callback),\n    });\n\n    this._threadBinding = {\n      path: threadBinding.path,\n      getState: () => threadBinding.getState(),\n      getStateState: () => stateBinding.getState(),\n      outerSubscribe: (callback) => threadBinding.outerSubscribe(callback),\n      subscribe: (callback) => threadBinding.subscribe(callback),\n    };\n\n    this.composer = new ThreadComposerRuntimeImpl(\n      new NestedSubscriptionSubject({\n        path: {\n          ...this.path,\n          ref: this.path.ref + `${this.path.ref}.composer`,\n          composerSource: \"thread\",\n        },\n        getState: () => this._threadBinding.getState().composer,\n        subscribe: (callback) => this._threadBinding.subscribe(callback),\n      }),\n    );\n  }\n\n  public readonly composer;\n\n  public getState() {\n    return this._threadBinding.getStateState();\n  }\n\n  public append(message: CreateAppendMessage) {\n    this._threadBinding\n      .getState()\n      .append(\n        toAppendMessage(this._threadBinding.getState().messages, message),\n      );\n  }\n\n  public subscribe(callback: () => void) {\n    return this._threadBinding.subscribe(callback);\n  }\n\n  /**\n   * @derprecated Use `getMesssageById(id).getState().branchNumber` / `getMesssageById(id).getState().branchCount` instead. This will be removed in 0.6.0.\n   */\n  public getBranches(messageId: string) {\n    return this._threadBinding.getState().getBranches(messageId);\n  }\n\n  public getModelConfig() {\n    return this._threadBinding.getState().getModelConfig();\n  }\n\n  // TODO sometimes you want to continue when there is no child message\n  public startRun(parentId: string | null) {\n    return this._threadBinding.getState().startRun(parentId);\n  }\n\n  public cancelRun() {\n    this._threadBinding.getState().cancelRun();\n  }\n\n  /**\n   * @deprecated Use `getMesssageById(id).getContentPartByToolCallId(toolCallId).addToolResult({ result })` instead. This will be removed in 0.6.0.\n   */\n  public addToolResult(options: AddToolResultOptions) {\n    this._threadBinding.getState().addToolResult(options);\n  }\n\n  /**\n   * @deprecated Use `getMesssageById(id).switchToBranch({ options })` instead. This will be removed in 0.6.0.\n   */\n  public switchToBranch(branchId: string) {\n    return this._threadBinding.getState().switchToBranch(branchId);\n  }\n\n  /**\n   * @deprecated Use `getMesssageById(id).speak()` instead. This will be removed in 0.6.0.\n   */\n  public speak(messageId: string) {\n    return this._threadBinding.getState().speak(messageId);\n  }\n\n  public stopSpeaking() {\n    return this._threadBinding.getState().stopSpeaking();\n  }\n\n  public getSubmittedFeedback(messageId: string) {\n    return this._threadBinding.getState().getSubmittedFeedback(messageId);\n  }\n\n  /**\n   * @deprecated Use `getMesssageById(id).submitFeedback({ type })` instead. This will be removed in 0.6.0.\n   */\n  public submitFeedback(options: SubmitFeedbackOptions) {\n    return this._threadBinding.getState().submitFeedback(options);\n  }\n\n  /**\n   * @deprecated Use `getMesssageById(id).getMessageByIndex(idx).composer` instead. This will be removed in 0.6.0.\n   */\n  public getEditComposer(messageId: string) {\n    return this._threadBinding.getState().getEditComposer(messageId);\n  }\n\n  /**\n   * @deprecated Use `getMesssageById(id).getMessageByIndex(idx).composer.beginEdit()` instead. This will be removed in 0.6.0.\n   */\n  public beginEdit(messageId: string) {\n    return this._threadBinding.getState().beginEdit(messageId);\n  }\n\n  public export() {\n    return this._threadBinding.getState().export();\n  }\n\n  public import(data: ExportedMessageRepository) {\n    this._threadBinding.getState().import(data);\n  }\n\n  public getMesssageByIndex(idx: number) {\n    if (idx < 0) throw new Error(\"Message index must be >= 0\");\n\n    return this._getMessageRuntime(\n      {\n        ...this.path,\n        ref: this.path.ref + `${this.path.ref}.messages[${idx}]`,\n        messageSelector: { type: \"index\", index: idx },\n      },\n      () => {\n        const messages = this._threadBinding.getState().messages;\n        const message = messages[idx];\n        if (!message) return undefined;\n        return {\n          message,\n          parentId: messages[idx - 1]?.id ?? null,\n        };\n      },\n    );\n  }\n\n  public getMesssageById(messageId: string) {\n    return this._getMessageRuntime(\n      {\n        ...this.path,\n        ref:\n          this.path.ref +\n          `${this.path.ref}.messages[messageId=${JSON.stringify(messageId)}]`,\n        messageSelector: { type: \"messageId\", messageId: messageId },\n      },\n      () => this._threadBinding.getState().getMessageById(messageId),\n    );\n  }\n\n  private _getMessageRuntime(\n    path: MessageRuntimePath,\n    callback: () =>\n      | { parentId: string | null; message: ThreadMessage }\n      | undefined,\n  ) {\n    return new MessageRuntimeImpl(\n      new ShallowMemoizeSubject({\n        path,\n        getState: () => {\n          const { message, parentId } = callback() ?? {};\n\n          const { messages, speech: speechState } =\n            this._threadBinding.getState();\n\n          if (!message || parentId === undefined) return SKIP_UPDATE;\n\n          const thread = this._threadBinding.getState();\n\n          const branches = thread.getBranches(message.id);\n          const submittedFeedback = thread.getSubmittedFeedback(message.id);\n\n          return {\n            ...message,\n\n            message,\n            isLast: messages.at(-1)?.id === message.id,\n            parentId,\n\n            branches,\n            branchNumber: branches.indexOf(message.id) + 1,\n            branchCount: branches.length,\n\n            speech:\n              speechState?.messageId === message.id ? speechState : undefined,\n\n            submittedFeedback,\n          } satisfies MessageState;\n        },\n        subscribe: (callback) => this._threadBinding.subscribe(callback),\n      }),\n      this._threadBinding,\n    );\n  }\n\n  private _eventListenerNestedSubscriptions = new Map<\n    string,\n    NestedSubscriptionSubject<Subscribable, ThreadRuntimePath>\n  >();\n\n  public unstable_on(\n    event: ThreadRuntimeEventType,\n    callback: () => void,\n  ): Unsubscribe {\n    let subject = this._eventListenerNestedSubscriptions.get(event);\n    if (!subject) {\n      subject = new NestedSubscriptionSubject({\n        path: this.path,\n        getState: () => ({\n          subscribe: (callback) =>\n            this._threadBinding.getState().unstable_on(event, callback),\n        }),\n        subscribe: (callback) => this._threadBinding.outerSubscribe(callback),\n      });\n      this._eventListenerNestedSubscriptions.set(event, subject);\n    }\n    return subject.subscribe(callback);\n  }\n}\n"],"mappings":"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","names":["callback"]}