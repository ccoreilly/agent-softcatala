import { ThreadListMetadata } from "../runtimes/core/ThreadListRuntimeCore";
import { Unsubscribe } from "../types";
import { ThreadListItemRuntimePath } from "./RuntimePathTypes";
import { SubscribableWithState } from "./subscribable/Subscribable";
import { ThreadListRuntimeCoreBinding } from "./ThreadListRuntime";
export type ThreadListItemState = ThreadListMetadata;
export type ThreadListItemRuntime = Readonly<{
    path: ThreadListItemRuntimePath;
    getState(): ThreadListMetadata;
    rename(newTitle: string): Promise<void>;
    archive(): Promise<void>;
    unarchive(): Promise<void>;
    delete(): Promise<void>;
    subscribe(callback: () => void): Unsubscribe;
}>;
export type ThreadListItemStateBinding = SubscribableWithState<ThreadListItemState, ThreadListItemRuntimePath>;
export declare class ThreadListItemRuntimeImpl implements ThreadListItemRuntime {
    private _core;
    private _ThreadListBinding;
    get path(): ThreadListItemRuntimePath;
    constructor(_core: ThreadListItemStateBinding, _ThreadListBinding: ThreadListRuntimeCoreBinding);
    getState(): ThreadListItemState;
    rename(newTitle: string): Promise<void>;
    archive(): Promise<void>;
    unarchive(): Promise<void>;
    delete(): Promise<void>;
    subscribe(callback: () => void): Unsubscribe;
}
//# sourceMappingURL=ThreadListItemRuntime.d.ts.map