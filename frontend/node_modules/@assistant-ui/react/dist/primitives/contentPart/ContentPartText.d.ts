import { Primitive } from "@radix-ui/react-primitive";
import { type ElementRef, ComponentPropsWithoutRef, ElementType } from "react";
/**
 * @deprecated Use `ContentPartPrimitive.Text.Props` instead. This will be removed in 0.6.
 */
export type ContentPartPrimitiveTextProps = ContentPartPrimitiveText.Props;
export declare namespace ContentPartPrimitiveText {
    type Element = ElementRef<typeof Primitive.span>;
    type Props = Omit<ComponentPropsWithoutRef<typeof Primitive.span>, "children" | "asChild"> & {
        smooth?: boolean;
        component?: ElementType;
    };
}
export declare const ContentPartPrimitiveText: import("react").ForwardRefExoticComponent<Omit<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void | import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | import("react").RefObject<HTMLSpanElement> | null | undefined;
} & {
    asChild?: boolean;
}, "ref">, "children" | "asChild"> & {
    smooth?: boolean;
    component?: ElementType;
} & import("react").RefAttributes<HTMLSpanElement>>;
//# sourceMappingURL=ContentPartText.d.ts.map