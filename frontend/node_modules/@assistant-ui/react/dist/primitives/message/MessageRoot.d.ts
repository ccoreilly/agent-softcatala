import { Primitive } from "@radix-ui/react-primitive";
import { type ElementRef, ComponentPropsWithoutRef } from "react";
/**
 * @deprecated Use `MessagePrimitive.Root.Props` instead. This will be removed in 0.6.
 */
export type MessagePrimitiveRootProps = MessagePrimitiveRoot.Props;
export declare namespace MessagePrimitiveRoot {
    type Element = ElementRef<typeof Primitive.div>;
    type Props = ComponentPropsWithoutRef<typeof Primitive.div>;
}
export declare const MessagePrimitiveRoot: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void | import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | import("react").RefObject<HTMLDivElement> | null | undefined;
} & {
    asChild?: boolean;
}, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=MessageRoot.d.ts.map