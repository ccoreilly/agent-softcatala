import type { ModelConfigProvider, AppendMessage } from "../../types";
import { LocalRuntimeOptionsBase } from "./LocalRuntimeOptions";
import { AddToolResultOptions, ThreadSuggestion, ThreadRuntimeCore } from "../core/ThreadRuntimeCore";
import { BaseThreadRuntimeCore } from "../core/BaseThreadRuntimeCore";
export declare class LocalThreadRuntimeCore extends BaseThreadRuntimeCore implements ThreadRuntimeCore {
    readonly threadId: string;
    readonly capabilities: {
        switchToBranch: boolean;
        edit: boolean;
        reload: boolean;
        cancel: boolean;
        unstable_copy: boolean;
        speech: boolean;
        attachments: boolean;
        feedback: boolean;
    };
    private abortController;
    readonly isDisabled = false;
    readonly suggestions: readonly ThreadSuggestion[];
    get adapters(): {
        chatModel: import("./ChatModelAdapter").ChatModelAdapter;
        attachments?: import("..").AttachmentAdapter | undefined;
        speech?: import("..").SpeechSynthesisAdapter | undefined;
        feedback?: import("..").FeedbackAdapter | undefined;
    };
    constructor(configProvider: ModelConfigProvider, threadId: string, options: LocalRuntimeOptionsBase);
    private _options;
    get extras(): undefined;
    setOptions(options: LocalRuntimeOptionsBase): void;
    append(message: AppendMessage): Promise<void>;
    startRun(parentId: string | null): Promise<void>;
    private performRoundtrip;
    cancelRun(): void;
    addToolResult({ messageId, toolCallId, result, }: AddToolResultOptions): void;
}
//# sourceMappingURL=LocalThreadRuntimeCore.d.ts.map