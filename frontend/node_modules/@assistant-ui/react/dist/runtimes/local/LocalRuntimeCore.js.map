{"version":3,"sources":["../../../src/runtimes/local/LocalRuntimeCore.tsx"],"sourcesContent":["import type { CoreMessage } from \"../../types/AssistantTypes\";\nimport { BaseAssistantRuntimeCore } from \"../core/BaseAssistantRuntimeCore\";\nimport { LocalThreadRuntimeCore } from \"./LocalThreadRuntimeCore\";\nimport { LocalRuntimeOptionsBase } from \"./LocalRuntimeOptions\";\nimport { fromCoreMessages } from \"../edge/converters/fromCoreMessage\";\nimport { LocalThreadListRuntimeCore } from \"./LocalThreadListRuntimeCore\";\nimport { ExportedMessageRepository } from \"../utils/MessageRepository\";\n\nconst getExportFromInitialMessages = (\n  initialMessages: readonly CoreMessage[],\n): ExportedMessageRepository => {\n  const messages = fromCoreMessages(initialMessages);\n  return {\n    messages: messages.map((m, idx) => ({\n      parentId: messages[idx - 1]?.id ?? null,\n      message: m,\n    })),\n  };\n};\n\nexport class LocalRuntimeCore extends BaseAssistantRuntimeCore {\n  public readonly threadList;\n\n  private _options: LocalRuntimeOptionsBase;\n\n  constructor(\n    options: LocalRuntimeOptionsBase,\n    initialMessages: readonly CoreMessage[] | undefined,\n  ) {\n    super();\n\n    this._options = options;\n\n    this.threadList = new LocalThreadListRuntimeCore((threadId, data) => {\n      const thread = new LocalThreadRuntimeCore(\n        this._proxyConfigProvider,\n        threadId,\n        this._options,\n      );\n      thread.import(data);\n      return thread;\n    });\n\n    if (initialMessages) {\n      this.threadList.mainThread.import(\n        getExportFromInitialMessages(initialMessages),\n      );\n    }\n  }\n\n  public setOptions(options: LocalRuntimeOptionsBase) {\n    this._options = options;\n\n    this.threadList.mainThread.setOptions(options);\n  }\n\n  public reset({\n    initialMessages,\n  }: {\n    initialMessages?: readonly CoreMessage[] | undefined;\n  } = {}) {\n    this.threadList.switchToNewThread();\n    if (!initialMessages) return;\n\n    this.threadList.mainThread.import(\n      getExportFromInitialMessages(initialMessages),\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sCAAyC;AACzC,oCAAuC;AAEvC,6BAAiC;AACjC,wCAA2C;AAG3C,IAAM,+BAA+B,CACnC,oBAC8B;AAC9B,QAAM,eAAW,yCAAiB,eAAe;AACjD,SAAO;AAAA,IACL,UAAU,SAAS,IAAI,CAAC,GAAG,SAAS;AAAA,MAClC,UAAU,SAAS,MAAM,CAAC,GAAG,MAAM;AAAA,MACnC,SAAS;AAAA,IACX,EAAE;AAAA,EACJ;AACF;AAEO,IAAM,mBAAN,cAA+B,yDAAyB;AAAA,EAC7C;AAAA,EAER;AAAA,EAER,YACE,SACA,iBACA;AACA,UAAM;AAEN,SAAK,WAAW;AAEhB,SAAK,aAAa,IAAI,6DAA2B,CAAC,UAAU,SAAS;AACnE,YAAM,SAAS,IAAI;AAAA,QACjB,KAAK;AAAA,QACL;AAAA,QACA,KAAK;AAAA,MACP;AACA,aAAO,OAAO,IAAI;AAClB,aAAO;AAAA,IACT,CAAC;AAED,QAAI,iBAAiB;AACnB,WAAK,WAAW,WAAW;AAAA,QACzB,6BAA6B,eAAe;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA,EAEO,WAAW,SAAkC;AAClD,SAAK,WAAW;AAEhB,SAAK,WAAW,WAAW,WAAW,OAAO;AAAA,EAC/C;AAAA,EAEO,MAAM;AAAA,IACX;AAAA,EACF,IAEI,CAAC,GAAG;AACN,SAAK,WAAW,kBAAkB;AAClC,QAAI,CAAC,gBAAiB;AAEtB,SAAK,WAAW,WAAW;AAAA,MACzB,6BAA6B,eAAe;AAAA,IAC9C;AAAA,EACF;AACF;","names":[]}