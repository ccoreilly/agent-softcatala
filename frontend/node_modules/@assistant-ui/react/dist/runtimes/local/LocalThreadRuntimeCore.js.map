{"version":3,"sources":["../../../src/runtimes/local/LocalThreadRuntimeCore.tsx"],"sourcesContent":["import { generateId } from \"../../internal\";\nimport type {\n  ModelConfigProvider,\n  AppendMessage,\n  ThreadAssistantMessage,\n} from \"../../types\";\nimport { fromCoreMessage } from \"../edge\";\nimport type { ChatModelRunResult } from \"./ChatModelAdapter\";\nimport { shouldContinue } from \"./shouldContinue\";\nimport { LocalRuntimeOptionsBase } from \"./LocalRuntimeOptions\";\nimport {\n  AddToolResultOptions,\n  ThreadSuggestion,\n  ThreadRuntimeCore,\n} from \"../core/ThreadRuntimeCore\";\nimport { BaseThreadRuntimeCore } from \"../core/BaseThreadRuntimeCore\";\n\nexport class LocalThreadRuntimeCore\n  extends BaseThreadRuntimeCore\n  implements ThreadRuntimeCore\n{\n  public readonly capabilities = {\n    switchToBranch: true,\n    edit: true,\n    reload: true,\n    cancel: true,\n    unstable_copy: true,\n    speech: false,\n    attachments: false,\n    feedback: false,\n  };\n\n  private abortController: AbortController | null = null;\n\n  public readonly isDisabled = false;\n  public readonly suggestions: readonly ThreadSuggestion[] = [];\n\n  public get adapters() {\n    return this._options.adapters;\n  }\n\n  constructor(\n    configProvider: ModelConfigProvider,\n    public readonly threadId: string,\n    options: LocalRuntimeOptionsBase,\n  ) {\n    super(configProvider);\n\n    this.setOptions(options);\n  }\n\n  private _options!: LocalRuntimeOptionsBase;\n\n  public get extras() {\n    return undefined;\n  }\n\n  public setOptions(options: LocalRuntimeOptionsBase) {\n    if (this._options === options) return;\n\n    this._options = options;\n\n    let hasUpdates = false;\n\n    const canSpeak = options.adapters?.speech !== undefined;\n    if (this.capabilities.speech !== canSpeak) {\n      this.capabilities.speech = canSpeak;\n      hasUpdates = true;\n    }\n\n    const canAttach = options.adapters?.attachments !== undefined;\n    if (this.capabilities.attachments !== canAttach) {\n      this.capabilities.attachments = canAttach;\n      hasUpdates = true;\n    }\n\n    const canFeedback = options.adapters?.feedback !== undefined;\n    if (this.capabilities.feedback !== canFeedback) {\n      this.capabilities.feedback = canFeedback;\n      hasUpdates = true;\n    }\n\n    if (hasUpdates) this._notifySubscribers();\n  }\n\n  public async append(message: AppendMessage): Promise<void> {\n    const newMessage = fromCoreMessage(message, {\n      attachments: message.attachments,\n    });\n    this.repository.addOrUpdateMessage(message.parentId, newMessage);\n\n    const startRun = message.startRun ?? message.role === \"user\";\n    if (startRun) {\n      await this.startRun(newMessage.id);\n    } else {\n      this.repository.resetHead(newMessage.id);\n      this._notifySubscribers();\n    }\n  }\n\n  public async startRun(parentId: string | null): Promise<void> {\n    this.repository.resetHead(parentId);\n\n    // add assistant message\n    const id = generateId();\n    let message: ThreadAssistantMessage = {\n      id,\n      role: \"assistant\",\n      status: { type: \"running\" },\n      content: [],\n      createdAt: new Date(),\n    };\n\n    this._notifyEventSubscribers(\"run-start\");\n\n    do {\n      message = await this.performRoundtrip(parentId, message);\n    } while (shouldContinue(message));\n  }\n\n  private async performRoundtrip(\n    parentId: string | null,\n    message: ThreadAssistantMessage,\n  ) {\n    const messages = this.repository.getMessages();\n\n    // abort existing run\n    this.abortController?.abort();\n    this.abortController = new AbortController();\n\n    const initialContent = message.content;\n    const initialSteps = message.metadata?.steps;\n    const initalCustom = message.metadata?.custom;\n    const updateMessage = (m: Partial<ChatModelRunResult>) => {\n      const newSteps = m.metadata?.steps || m.metadata?.roundtrips;\n      const steps = newSteps\n        ? [...(initialSteps ?? []), ...newSteps]\n        : undefined;\n\n      message = {\n        ...message,\n        ...(m.content\n          ? { content: [...initialContent, ...(m.content ?? [])] }\n          : undefined),\n        status: m.status ?? message.status,\n        // TODO deprecated, remove in v0.6\n        ...(steps ? { roundtrips: steps } : undefined),\n        ...(m.metadata\n          ? {\n              metadata: {\n                ...message.metadata,\n                ...(steps ? { roundtrips: steps, steps } : undefined),\n                ...(m.metadata?.custom\n                  ? {\n                      custom: { ...(initalCustom ?? {}), ...m.metadata.custom },\n                    }\n                  : undefined),\n              },\n            }\n          : undefined),\n      };\n      this.repository.addOrUpdateMessage(parentId, message);\n      this._notifySubscribers();\n    };\n\n    const maxSteps = this._options.maxSteps\n      ? this._options.maxSteps\n      : (this._options.maxToolRoundtrips ?? 1) + 1;\n\n    const steps = message.metadata?.steps?.length ?? 0;\n    if (steps >= maxSteps) {\n      // reached max tool steps\n      updateMessage({\n        status: {\n          type: \"incomplete\",\n          reason: \"tool-calls\",\n        },\n      });\n      return message;\n    } else {\n      updateMessage({\n        status: {\n          type: \"running\",\n        },\n      });\n    }\n\n    try {\n      const promiseOrGenerator = this.adapters.chatModel.run({\n        messages,\n        abortSignal: this.abortController.signal,\n        config: this.getModelConfig(),\n        onUpdate: updateMessage,\n        unstable_assistantMessageId: message.id,\n      });\n\n      // handle async iterator for streaming results\n      if (Symbol.asyncIterator in promiseOrGenerator) {\n        for await (const r of promiseOrGenerator) {\n          updateMessage(r);\n        }\n      } else {\n        updateMessage(await promiseOrGenerator);\n      }\n\n      this.abortController = null;\n\n      if (message.status.type === \"running\") {\n        updateMessage({\n          status: { type: \"complete\", reason: \"unknown\" },\n        });\n      }\n    } catch (e) {\n      this.abortController = null;\n\n      // TODO this should be handled by the run result stream\n      if (e instanceof Error && e.name === \"AbortError\") {\n        updateMessage({\n          status: { type: \"incomplete\", reason: \"cancelled\" },\n        });\n      } else {\n        updateMessage({\n          status: { type: \"incomplete\", reason: \"error\", error: e },\n        });\n\n        throw e;\n      }\n    }\n    return message;\n  }\n\n  public cancelRun() {\n    this.abortController?.abort();\n    this.abortController = null;\n  }\n\n  public addToolResult({\n    messageId,\n    toolCallId,\n    result,\n  }: AddToolResultOptions) {\n    const messageData = this.repository.getMessage(messageId);\n    const { parentId } = messageData;\n    let { message } = messageData;\n\n    if (message.role !== \"assistant\")\n      throw new Error(\"Tried to add tool result to non-assistant message\");\n\n    let added = false;\n    let found = false;\n    const newContent = message.content.map((c) => {\n      if (c.type !== \"tool-call\") return c;\n      if (c.toolCallId !== toolCallId) return c;\n      found = true;\n      if (!c.result) added = true;\n      return {\n        ...c,\n        result,\n      };\n    });\n\n    if (!found)\n      throw new Error(\"Tried to add tool result to non-existing tool call\");\n\n    message = {\n      ...message,\n      content: newContent,\n    };\n    this.repository.addOrUpdateMessage(parentId, message);\n\n    if (added && shouldContinue(message)) {\n      this.performRoundtrip(parentId, message);\n    }\n  }\n}\n"],"mappings":"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","names":["steps"]}