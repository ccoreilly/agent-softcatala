"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtimes/composer/BaseComposerRuntimeCore.tsx
var BaseComposerRuntimeCore_exports = {};
__export(BaseComposerRuntimeCore_exports, {
  BaseComposerRuntimeCore: () => BaseComposerRuntimeCore
});
module.exports = __toCommonJS(BaseComposerRuntimeCore_exports);
var isAttachmentComplete = (a) => a.status.type === "complete";
var BaseComposerRuntimeCore = class {
  isEditing = true;
  getAttachmentAccept() {
    return this.getAttachmentAdapter()?.accept ?? "*";
  }
  _attachments = [];
  get attachments() {
    return this._attachments;
  }
  setAttachments(value) {
    this._attachments = value;
    this.notifySubscribers();
  }
  get isEmpty() {
    return !this.text.trim() && !this.attachments.length;
  }
  _text = "";
  get text() {
    return this._text;
  }
  _role = "user";
  get role() {
    return this._role;
  }
  setRole(role) {
    this._role = role;
    this.notifySubscribers();
  }
  setText(value) {
    this._text = value;
    this.notifySubscribers();
  }
  reset() {
    this._text = "";
    this._role = "user";
    this._attachments = [];
    this.notifySubscribers();
  }
  async send() {
    const adapter = this.getAttachmentAdapter();
    const attachments = adapter && this.attachments.length > 0 ? await Promise.all(
      this.attachments.map(async (a) => {
        if (isAttachmentComplete(a)) return a;
        const result = await adapter.send(a);
        if (result.status?.type !== "complete") {
          result.status = { type: "complete" };
        }
        return result;
      })
    ) : [];
    const message = {
      role: this.role,
      content: this.text ? [{ type: "text", text: this.text }] : [],
      attachments
    };
    this.reset();
    this.handleSend(message);
  }
  async addAttachment(file) {
    const adapter = this.getAttachmentAdapter();
    if (!adapter) throw new Error("Attachments are not supported");
    const attachment = await adapter.add({ file });
    if (attachment.status === void 0) {
      attachment.status = { type: "requires-action", reason: "composer-send" };
    }
    this._attachments = [...this._attachments, attachment];
    this.notifySubscribers();
  }
  async removeAttachment(attachmentId) {
    const adapter = this.getAttachmentAdapter();
    if (!adapter) throw new Error("Attachments are not supported");
    const index = this._attachments.findIndex((a) => a.id === attachmentId);
    if (index === -1) throw new Error("Attachment not found");
    const attachment = this._attachments[index];
    await adapter.remove(attachment);
    this._attachments = this._attachments.toSpliced(index, 1);
    this.notifySubscribers();
  }
  _subscriptions = /* @__PURE__ */ new Set();
  notifySubscribers() {
    for (const callback of this._subscriptions) callback();
  }
  subscribe(callback) {
    this._subscriptions.add(callback);
    return () => this._subscriptions.delete(callback);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseComposerRuntimeCore
});
//# sourceMappingURL=BaseComposerRuntimeCore.js.map