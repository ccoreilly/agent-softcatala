{"version":3,"sources":["../../../src/runtimes/composer/BaseComposerRuntimeCore.tsx"],"sourcesContent":["import {\n  Attachment,\n  CompleteAttachment,\n  PendingAttachment,\n} from \"../../types/AttachmentTypes\";\nimport { AppendMessage, Unsubscribe } from \"../../types\";\nimport { AttachmentAdapter } from \"../attachment\";\nimport { ComposerRuntimeCore } from \"../core/ComposerRuntimeCore\";\nimport { MessageRole } from \"../../types/AssistantTypes\";\n\nconst isAttachmentComplete = (a: Attachment): a is CompleteAttachment =>\n  a.status.type === \"complete\";\n\nexport abstract class BaseComposerRuntimeCore implements ComposerRuntimeCore {\n  public readonly isEditing = true;\n\n  protected abstract getAttachmentAdapter(): AttachmentAdapter | undefined;\n\n  public getAttachmentAccept(): string {\n    return this.getAttachmentAdapter()?.accept ?? \"*\";\n  }\n\n  private _attachments: readonly Attachment[] = [];\n  public get attachments() {\n    return this._attachments;\n  }\n\n  protected setAttachments(value: readonly Attachment[]) {\n    this._attachments = value;\n    this.notifySubscribers();\n  }\n\n  public abstract get canCancel(): boolean;\n\n  public get isEmpty() {\n    return !this.text.trim() && !this.attachments.length;\n  }\n\n  private _text = \"\";\n\n  get text() {\n    return this._text;\n  }\n\n  private _role: MessageRole = \"user\";\n\n  get role() {\n    return this._role;\n  }\n\n  setRole(role: MessageRole) {\n    this._role = role;\n    this.notifySubscribers();\n  }\n\n  setText(value: string) {\n    this._text = value;\n    this.notifySubscribers();\n  }\n\n  reset() {\n    this._text = \"\";\n    this._role = \"user\";\n    this._attachments = [];\n    this.notifySubscribers();\n  }\n\n  public async send() {\n    const adapter = this.getAttachmentAdapter();\n    const attachments =\n      adapter && this.attachments.length > 0\n        ? await Promise.all(\n            this.attachments.map(async (a) => {\n              if (isAttachmentComplete(a)) return a;\n              const result = await adapter.send(a);\n              // TODO remove after 0.6.0\n              if (result.status?.type !== \"complete\") {\n                result.status = { type: \"complete\" };\n              }\n              return result as CompleteAttachment;\n            }),\n          )\n        : [];\n\n    const message: Omit<AppendMessage, \"parentId\"> = {\n      role: this.role,\n      content: this.text ? [{ type: \"text\", text: this.text }] : [],\n      attachments,\n    };\n    this.reset();\n\n    this.handleSend(message);\n  }\n  public abstract handleSend(message: Omit<AppendMessage, \"parentId\">): void;\n  public abstract cancel(): void;\n\n  async addAttachment(file: File) {\n    const adapter = this.getAttachmentAdapter();\n    if (!adapter) throw new Error(\"Attachments are not supported\");\n\n    const attachment = await adapter.add({ file });\n    // TODO remove after 0.6.0\n    if (attachment.status === undefined) {\n      attachment.status = { type: \"requires-action\", reason: \"composer-send\" };\n    }\n\n    this._attachments = [...this._attachments, attachment as PendingAttachment];\n    this.notifySubscribers();\n  }\n\n  async removeAttachment(attachmentId: string) {\n    const adapter = this.getAttachmentAdapter();\n    if (!adapter) throw new Error(\"Attachments are not supported\");\n\n    const index = this._attachments.findIndex((a) => a.id === attachmentId);\n    if (index === -1) throw new Error(\"Attachment not found\");\n    const attachment = this._attachments[index]!;\n\n    await adapter.remove(attachment);\n\n    this._attachments = this._attachments.toSpliced(index, 1);\n    this.notifySubscribers();\n  }\n\n  private _subscriptions = new Set<() => void>();\n  protected notifySubscribers() {\n    for (const callback of this._subscriptions) callback();\n  }\n\n  public subscribe(callback: () => void): Unsubscribe {\n    this._subscriptions.add(callback);\n    return () => this._subscriptions.delete(callback);\n  }\n}\n"],"mappings":"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","names":[]}