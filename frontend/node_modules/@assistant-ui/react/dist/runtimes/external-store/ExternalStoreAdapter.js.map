{"version":3,"sources":["../../../src/runtimes/external-store/ExternalStoreAdapter.tsx"],"sourcesContent":["import { AppendMessage, ThreadMessage } from \"../../types\";\nimport { AttachmentAdapter } from \"../attachment\";\nimport {\n  AddToolResultOptions,\n  ThreadSuggestion,\n} from \"../core/ThreadRuntimeCore\";\nimport { FeedbackAdapter } from \"../feedback/FeedbackAdapter\";\nimport { SpeechSynthesisAdapter } from \"../speech/SpeechAdapterTypes\";\nimport { ThreadListMetadata } from \"../core/ThreadListRuntimeCore\";\nimport { ThreadMessageLike } from \"./ThreadMessageLike\";\n\nexport type ExternalStoreThreadListAdapter = {\n  threadId?: string | undefined;\n  threads?: readonly ThreadListMetadata[] | undefined;\n  archivedThreads?: readonly ThreadListMetadata[] | undefined;\n  onSwitchToNewThread?: (() => Promise<void> | void) | undefined;\n  onSwitchToThread?: ((threadId: string) => Promise<void> | void) | undefined;\n  onRename?: (\n    threadId: string,\n    newTitle: string,\n  ) => (Promise<void> | void) | undefined;\n  onArchive?: ((threadId: string) => Promise<void> | void) | undefined;\n  onUnarchive?: ((threadId: string) => Promise<void> | void) | undefined;\n  onDelete?: ((threadId: string) => Promise<void> | void) | undefined;\n};\n\nexport type ExternalStoreMessageConverter<T> = (\n  message: T,\n  idx: number,\n) => ThreadMessageLike;\n\ntype ExternalStoreMessageConverterAdapter<T> = {\n  convertMessage: ExternalStoreMessageConverter<T>;\n};\n\ntype ExternalStoreAdapterBase<T> = {\n  /**\n   * @deprecated Use `adapterst.threadList.threadId` instead. This will be removed in 0.6.0.\n   */\n  threadId?: string | undefined;\n\n  /**\n   * @deprecated Use `adapters..threadList.onSwitchToThread` instead. This will be removed in 0.6.0.\n   */\n  onSwitchToThread?: ((threadId: string) => Promise<void> | void) | undefined;\n  /**\n   * @deprecated Use `adapters.threadList.onSwitchToNewThread` instead. This will be removed in 0.6.0.\n   */\n  onSwitchToNewThread?: (() => Promise<void> | void) | undefined;\n\n  isDisabled?: boolean | undefined;\n  isRunning?: boolean | undefined;\n  messages: T[];\n  suggestions?: readonly ThreadSuggestion[] | undefined;\n  extras?: unknown;\n\n  setMessages?: ((messages: T[]) => void) | undefined;\n  onNew: (message: AppendMessage) => Promise<void>;\n  onEdit?: ((message: AppendMessage) => Promise<void>) | undefined;\n  onReload?: ((parentId: string | null) => Promise<void>) | undefined;\n  onCancel?: (() => Promise<void>) | undefined;\n  onAddToolResult?:\n    | ((options: AddToolResultOptions) => Promise<void> | void)\n    | undefined;\n  convertMessage?: ExternalStoreMessageConverter<T> | undefined;\n  adapters?:\n    | {\n        attachments?: AttachmentAdapter | undefined;\n        speech?: SpeechSynthesisAdapter | undefined;\n        feedback?: FeedbackAdapter | undefined;\n        threadList?: ExternalStoreThreadListAdapter | undefined;\n      }\n    | undefined;\n  unstable_capabilities?:\n    | {\n        copy?: boolean | undefined;\n      }\n    | undefined;\n};\n\nexport type ExternalStoreAdapter<T = ThreadMessage> =\n  ExternalStoreAdapterBase<T> &\n    (T extends ThreadMessage\n      ? object\n      : ExternalStoreMessageConverterAdapter<T>);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}