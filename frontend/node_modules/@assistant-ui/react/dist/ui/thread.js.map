{"version":3,"sources":["../../src/ui/thread.tsx"],"sourcesContent":["\"use client\";\n\nimport { ComponentType, forwardRef, type FC } from \"react\";\nimport { ArrowDownIcon } from \"lucide-react\";\n\nimport { withDefaults } from \"./utils/withDefaults\";\nimport Composer from \"./composer\";\nimport ThreadWelcome from \"./thread-welcome\";\nimport {\n  TooltipIconButton,\n  TooltipIconButtonProps,\n} from \"./base/tooltip-icon-button\";\nimport AssistantMessage from \"./assistant-message\";\nimport UserMessage from \"./user-message\";\nimport EditComposer from \"./edit-composer\";\nimport {\n  ThreadConfig,\n  ThreadConfigProvider,\n  ThreadConfigProviderProps,\n  useThreadConfig,\n} from \"./thread-config\";\nimport { ThreadPrimitive } from \"../primitives\";\nimport { useThread } from \"../context\";\n\nconst Thread: FC<ThreadConfig> = (config) => {\n  const {\n    components: {\n      Composer: ComposerComponent = Composer,\n      ThreadWelcome: ThreadWelcomeComponent = ThreadWelcome,\n    } = {},\n  } = config;\n  return (\n    <ThreadRoot config={config}>\n      <ThreadViewport>\n        <ThreadWelcomeComponent />\n        <ThreadMessages />\n        <ThreadFollowupSuggestions />\n        <ThreadViewportFooter>\n          <ThreadScrollToBottom />\n          <ComposerComponent />\n        </ThreadViewportFooter>\n      </ThreadViewport>\n    </ThreadRoot>\n  );\n};\n\n/**\n * @deprecated Use `Thread.Root.Props` instead. This will be removed in 0.6.\n */\nexport type ThreadRootProps = ThreadRoot.Props;\n\nnamespace ThreadRoot {\n  export type Element = HTMLDivElement;\n  export type Props = ThreadPrimitive.Root.Props & ThreadConfigProviderProps;\n}\n\nconst ThreadRootStyled = withDefaults(ThreadPrimitive.Root, {\n  className: \"aui-root aui-thread-root\",\n});\n\nconst ThreadRoot = forwardRef<ThreadRoot.Element, ThreadRoot.Props>(\n  ({ config, ...props }, ref) => {\n    return (\n      <ThreadConfigProvider config={config}>\n        <ThreadRootStyled {...props} ref={ref} />\n      </ThreadConfigProvider>\n    );\n  },\n);\n\nThreadRoot.displayName = \"ThreadRoot\";\n\nconst ThreadViewport = withDefaults(ThreadPrimitive.Viewport, {\n  className: \"aui-thread-viewport\",\n});\n\nThreadViewport.displayName = \"ThreadViewport\";\n\nconst ThreadViewportFooter = withDefaults(\"div\", {\n  className: \"aui-thread-viewport-footer\",\n});\n\nThreadViewportFooter.displayName = \"ThreadViewportFooter\";\n\nconst SystemMessage = () => null;\n\nconst ThreadMessages: FC<{\n  unstable_flexGrowDiv?: boolean;\n  components?: {\n    UserMessage?: ComponentType | undefined;\n    EditComposer?: ComponentType | undefined;\n    AssistantMessage?: ComponentType | undefined;\n    SystemMessage?: ComponentType | undefined;\n  };\n}> = ({ components, unstable_flexGrowDiv: flexGrowDiv = true, ...rest }) => {\n  return (\n    <>\n      <ThreadPrimitive.Messages\n        components={{\n          UserMessage: components?.UserMessage ?? UserMessage,\n          EditComposer: components?.EditComposer ?? EditComposer,\n          AssistantMessage: components?.AssistantMessage ?? AssistantMessage,\n          SystemMessage: components?.SystemMessage ?? SystemMessage,\n        }}\n        {...rest}\n      />\n      {flexGrowDiv && (\n        <ThreadPrimitive.If empty={false}>\n          <div style={{ flexGrow: 1 }} />\n        </ThreadPrimitive.If>\n      )}\n    </>\n  );\n};\n\nThreadMessages.displayName = \"ThreadMessages\";\n\nconst ThreadFollowupSuggestions: FC = () => {\n  const suggestions = useThread((t) => t.suggestions);\n\n  return (\n    <ThreadPrimitive.If empty={false} running={false}>\n      <div className=\"aui-thread-followup-suggestions\">\n        {suggestions?.map((suggestion, idx) => (\n          <ThreadPrimitive.Suggestion\n            key={idx}\n            className=\"aui-thread-followup-suggestion\"\n            prompt={suggestion.prompt}\n            method=\"replace\"\n            autoSend\n          >\n            {suggestion.prompt}\n          </ThreadPrimitive.Suggestion>\n        ))}\n      </div>\n    </ThreadPrimitive.If>\n  );\n};\n\nconst ThreadScrollToBottomIconButton = withDefaults(TooltipIconButton, {\n  variant: \"outline\",\n  className: \"aui-thread-scroll-to-bottom\",\n});\n\nnamespace ThreadScrollToBottom {\n  export type Element = HTMLButtonElement;\n  export type Props = Partial<TooltipIconButtonProps>;\n}\n\nconst ThreadScrollToBottom = forwardRef<\n  ThreadScrollToBottom.Element,\n  ThreadScrollToBottom.Props\n>((props, ref) => {\n  const {\n    strings: {\n      thread: { scrollToBottom: { tooltip = \"Scroll to bottom\" } = {} } = {},\n    } = {},\n  } = useThreadConfig();\n  return (\n    <ThreadPrimitive.ScrollToBottom asChild>\n      <ThreadScrollToBottomIconButton tooltip={tooltip} {...props} ref={ref}>\n        {props.children ?? <ArrowDownIcon />}\n      </ThreadScrollToBottomIconButton>\n    </ThreadPrimitive.ScrollToBottom>\n  );\n});\n\nThreadScrollToBottom.displayName = \"ThreadScrollToBottom\";\n\nconst exports = {\n  Root: ThreadRoot,\n  Viewport: ThreadViewport,\n  Messages: ThreadMessages,\n  FollowupSuggestions: ThreadFollowupSuggestions,\n  ScrollToBottom: ThreadScrollToBottom,\n  ViewportFooter: ThreadViewportFooter,\n};\n\nexport default Object.assign(Thread, exports) as typeof Thread & typeof exports;\n"],"mappings":"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","names":["Composer","ThreadWelcome","UserMessage","EditComposer","AssistantMessage","exports"]}