import { ComponentType, type FC } from "react";
import { TooltipIconButtonProps } from "./base/tooltip-icon-button";
import { ThreadConfig, ThreadConfigProviderProps } from "./thread-config";
import { ThreadPrimitive } from "../primitives";
declare const Thread: FC<ThreadConfig>;
/**
 * @deprecated Use `Thread.Root.Props` instead. This will be removed in 0.6.
 */
export type ThreadRootProps = ThreadRoot.Props;
declare namespace ThreadRoot {
    type Element = HTMLDivElement;
    type Props = ThreadPrimitive.Root.Props & ThreadConfigProviderProps;
}
declare const ThreadRoot: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void | import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | import("react").RefObject<HTMLDivElement> | null | undefined;
} & {
    asChild?: boolean;
}, "ref"> & {
    config?: ThreadConfig | undefined;
} & {
    children?: import("react").ReactNode | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
declare const exports: {
    Root: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | import("react").RefObject<HTMLDivElement> | null | undefined;
    } & {
        asChild?: boolean;
    }, "ref"> & {
        config?: ThreadConfig | undefined;
    } & {
        children?: import("react").ReactNode | undefined;
    } & import("react").RefAttributes<HTMLDivElement>>;
    Viewport: import("react").ForwardRefExoticComponent<Partial<Omit<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof import("react").DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | import("react").RefObject<HTMLDivElement> | null | undefined;
    } & {
        asChild?: boolean;
    }, "ref"> & import("../primitive-hooks/thread/useThreadViewportAutoScroll").UseThreadViewportAutoScrollProps & import("react").RefAttributes<HTMLDivElement>, "ref">> & import("react").RefAttributes<HTMLDivElement>>;
    Messages: FC<{
        unstable_flexGrowDiv?: boolean;
        components?: {
            UserMessage?: ComponentType | undefined;
            EditComposer?: ComponentType | undefined;
            AssistantMessage?: ComponentType | undefined;
            SystemMessage?: ComponentType | undefined;
        };
    }>;
    FollowupSuggestions: FC;
    ScrollToBottom: import("react").ForwardRefExoticComponent<Partial<TooltipIconButtonProps> & import("react").RefAttributes<HTMLButtonElement>>;
    ViewportFooter: import("react").ForwardRefExoticComponent<Partial<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">> & import("react").RefAttributes<HTMLDivElement>>;
};
declare const _default: typeof Thread & typeof exports;
export default _default;
//# sourceMappingURL=thread.d.ts.map