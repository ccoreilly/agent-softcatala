{"version":3,"sources":["../../src/types/ContentPartComponentTypes.tsx"],"sourcesContent":["\"use client\";\nimport type { ComponentType } from \"react\";\nimport type {\n  ContentPartStatus,\n  ImageContentPart,\n  TextContentPart,\n  ToolCallContentPart,\n  UIContentPart,\n  Unstable_AudioContentPart,\n} from \"./AssistantTypes\";\nimport { ContentPartState } from \"../api/ContentPartRuntime\";\n\nexport type EmptyContentPartProps = {\n  status: ContentPartStatus;\n};\nexport type EmptyContentPartComponent = ComponentType<EmptyContentPartProps>;\n\nexport type TextContentPartProps = ContentPartState &\n  TextContentPart & {\n    /**\n     * @deprecated You can directly access content part fields in the state. Replace `.part.type` with `.type` etc. This will be removed in 0.6.0.\n     */\n    part: TextContentPart;\n  };\nexport type TextContentPartComponent = ComponentType<TextContentPartProps>;\n\nexport type ImageContentPartProps = ContentPartState &\n  ImageContentPart & {\n    /**\n     * @deprecated You can directly access content part fields in the state. Replace `.part.type` with `.type` etc. This will be removed in 0.6.0.\n     */\n    part: ImageContentPart;\n  };\nexport type ImageContentPartComponent = ComponentType<ImageContentPartProps>;\n\nexport type Unstable_AudioContentPartProps = ContentPartState &\n  Unstable_AudioContentPart & {\n    /**\n     * @deprecated You can directly access content part fields in the state. Replace `.part.type` with `.type` etc. This will be removed in 0.6.0.\n     */\n    part: Unstable_AudioContentPart;\n  };\nexport type Unstable_AudioContentPartComponent =\n  ComponentType<Unstable_AudioContentPartProps>;\n\nexport type UIContentPartProps = ContentPartState &\n  UIContentPart & {\n    /**\n     * @deprecated You can directly access content part fields in the state. Replace `.part.type` with `.type` etc. This will be removed in 0.6.0.\n     */\n    part: UIContentPart;\n  };\nexport type UIContentPartComponent = ComponentType<UIContentPartProps>;\n\nexport type ToolCallContentPartProps<\n  TArgs extends Record<string, unknown> = any,\n  TResult = unknown,\n> = ContentPartState &\n  ToolCallContentPart<TArgs, TResult> & {\n    /**\n     * @deprecated You can directly access content part fields in the state. Replace `.part.type` with `.type` etc. This will be removed in 0.6.0.\n     */\n    part: ToolCallContentPart<TArgs, TResult>;\n    addResult: (result: any) => void;\n  };\n\nexport type ToolCallContentPartComponent<\n  TArgs extends Record<string, unknown> = any,\n  TResult = any,\n> = ComponentType<ToolCallContentPartProps<TArgs, TResult>>;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}