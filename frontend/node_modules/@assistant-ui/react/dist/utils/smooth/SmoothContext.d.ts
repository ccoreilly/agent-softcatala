import { ComponentType, FC, PropsWithChildren } from "react";
import { ReadonlyStore } from "../../context/ReadonlyStore";
export declare const SmoothContextProvider: FC<PropsWithChildren>;
export declare const withSmoothContextProvider: <C extends ComponentType<any>>(Component: C) => C;
export declare const useSmoothStatus: {
    (): {
        type: "running";
    } | {
        type: "complete";
    } | {
        type: "incomplete";
        reason: "cancelled" | "length" | "content-filter" | "other" | "error";
        error?: unknown;
    } | {
        type: "requires-action";
        reason: "tool-calls";
    };
    <TSelected>(selector: (state: {
        type: "running";
    } | {
        type: "complete";
    } | {
        type: "incomplete";
        reason: "cancelled" | "length" | "content-filter" | "other" | "error";
        error?: unknown;
    } | {
        type: "requires-action";
        reason: "tool-calls";
    }) => TSelected): TSelected;
    (options: {
        optional: true;
    }): {
        type: "running";
    } | {
        type: "complete";
    } | {
        type: "incomplete";
        reason: "cancelled" | "length" | "content-filter" | "other" | "error";
        error?: unknown;
    } | {
        type: "requires-action";
        reason: "tool-calls";
    } | null;
    <TSelected>(options: {
        optional: true;
        selector?: (state: {
            type: "running";
        } | {
            type: "complete";
        } | {
            type: "incomplete";
            reason: "cancelled" | "length" | "content-filter" | "other" | "error";
            error?: unknown;
        } | {
            type: "requires-action";
            reason: "tool-calls";
        }) => TSelected;
    }): TSelected | null;
}, useSmoothStatusStore: {
    (): ReadonlyStore<{
        type: "running";
    } | {
        type: "complete";
    } | {
        type: "incomplete";
        reason: "cancelled" | "length" | "content-filter" | "other" | "error";
        error?: unknown;
    } | {
        type: "requires-action";
        reason: "tool-calls";
    }>;
    (options: {
        optional: true;
    }): ReadonlyStore<{
        type: "running";
    } | {
        type: "complete";
    } | {
        type: "incomplete";
        reason: "cancelled" | "length" | "content-filter" | "other" | "error";
        error?: unknown;
    } | {
        type: "requires-action";
        reason: "tool-calls";
    }> | null;
};
//# sourceMappingURL=SmoothContext.d.ts.map