{"version":3,"sources":["../../../src/context/providers/AssistantRuntimeProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport type { FC, PropsWithChildren } from \"react\";\nimport { memo, useEffect, useMemo, useState } from \"react\";\nimport { AssistantContext } from \"../react/AssistantContext\";\nimport { makeAssistantToolUIsStore } from \"../stores/AssistantToolUIs\";\nimport { ThreadRuntimeProvider } from \"./ThreadRuntimeProvider\";\nimport { AssistantRuntime } from \"../../api/AssistantRuntime\";\nimport { create } from \"zustand\";\nimport { writableStore } from \"../ReadonlyStore\";\n\nexport namespace AssistantRuntimeProvider {\n  export type Props = PropsWithChildren<{\n    /**\n     * The runtime to provide to the rest of your app.\n     */\n    runtime: AssistantRuntime;\n  }>;\n}\n\nconst useAssistantRuntimeStore = (runtime: AssistantRuntime) => {\n  const [store] = useState(() => create(() => runtime));\n\n  useEffect(() => {\n    writableStore(store).setState(runtime, true);\n  }, [runtime, store]);\n\n  return store;\n};\n\nconst useAssistantToolUIsStore = () => {\n  return useMemo(() => makeAssistantToolUIsStore(), []);\n};\n\nconst useThreadListStore = (runtime: AssistantRuntime) => {\n  const [store] = useState(() => create(() => runtime.threadList.getState()));\n\n  useEffect(() => {\n    const updateState = () =>\n      writableStore(store).setState(runtime.threadList.getState(), true);\n    updateState();\n    return runtime.threadList.subscribe(updateState);\n  }, [runtime, store]);\n\n  return store;\n};\n\nexport const AssistantRuntimeProviderImpl: FC<\n  AssistantRuntimeProvider.Props\n> = ({ children, runtime }) => {\n  const useAssistantRuntime = useAssistantRuntimeStore(runtime);\n  const useToolUIs = useAssistantToolUIsStore();\n  const useThreadList = useThreadListStore(runtime);\n  const context = useMemo(() => {\n    return {\n      useToolUIs,\n      useAssistantRuntime,\n      useAssistantActions: useAssistantRuntime,\n      useThreadList,\n    };\n  }, [useAssistantRuntime, useToolUIs, useThreadList]);\n\n  return (\n    <AssistantContext.Provider value={context}>\n      <ThreadRuntimeProvider runtime={runtime.thread}>\n        {children}\n      </ThreadRuntimeProvider>\n    </AssistantContext.Provider>\n  );\n};\n\nexport const AssistantRuntimeProvider = memo(AssistantRuntimeProviderImpl);\n"],"mappings":";;;AAGA,SAAS,MAAM,WAAW,SAAS,gBAAgB;AACnD,SAAS,wBAAwB;AACjC,SAAS,iCAAiC;AAC1C,SAAS,6BAA6B;AAEtC,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAuDxB;AA5CN,IAAM,2BAA2B,CAAC,YAA8B;AAC9D,QAAM,CAAC,KAAK,IAAI,SAAS,MAAM,OAAO,MAAM,OAAO,CAAC;AAEpD,YAAU,MAAM;AACd,kBAAc,KAAK,EAAE,SAAS,SAAS,IAAI;AAAA,EAC7C,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEA,IAAM,2BAA2B,MAAM;AACrC,SAAO,QAAQ,MAAM,0BAA0B,GAAG,CAAC,CAAC;AACtD;AAEA,IAAM,qBAAqB,CAAC,YAA8B;AACxD,QAAM,CAAC,KAAK,IAAI,SAAS,MAAM,OAAO,MAAM,QAAQ,WAAW,SAAS,CAAC,CAAC;AAE1E,YAAU,MAAM;AACd,UAAM,cAAc,MAClB,cAAc,KAAK,EAAE,SAAS,QAAQ,WAAW,SAAS,GAAG,IAAI;AACnE,gBAAY;AACZ,WAAO,QAAQ,WAAW,UAAU,WAAW;AAAA,EACjD,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEO,IAAM,+BAET,CAAC,EAAE,UAAU,QAAQ,MAAM;AAC7B,QAAM,sBAAsB,yBAAyB,OAAO;AAC5D,QAAM,aAAa,yBAAyB;AAC5C,QAAM,gBAAgB,mBAAmB,OAAO;AAChD,QAAM,UAAU,QAAQ,MAAM;AAC5B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,qBAAqB;AAAA,MACrB;AAAA,IACF;AAAA,EACF,GAAG,CAAC,qBAAqB,YAAY,aAAa,CAAC;AAEnD,SACE,oBAAC,iBAAiB,UAAjB,EAA0B,OAAO,SAChC,8BAAC,yBAAsB,SAAS,QAAQ,QACrC,UACH,GACF;AAEJ;AAEO,IAAM,2BAA2B,KAAK,4BAA4B;","names":[]}