"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/context/react/ThreadContext.ts
var ThreadContext_exports = {};
__export(ThreadContext_exports, {
  ThreadContext: () => ThreadContext,
  actions: () => actions,
  useThread: () => useThread,
  useThreadActions: () => useThreadActions,
  useThreadActionsStore: () => useThreadActionsStore,
  useThreadComposer: () => useThreadComposer,
  useThreadComposerStore: () => useThreadComposerStore,
  useThreadContext: () => useThreadContext,
  useThreadMessages: () => useThreadMessages,
  useThreadMessagesStore: () => useThreadMessagesStore,
  useThreadModelConfig: () => useThreadModelConfig,
  useThreadRuntime: () => useThreadRuntime,
  useThreadRuntimeStore: () => useThreadRuntimeStore,
  useThreadStore: () => useThreadStore,
  useThreadViewport: () => useThreadViewport,
  useThreadViewportStore: () => useThreadViewportStore
});
module.exports = __toCommonJS(ThreadContext_exports);
var import_react = require("react");
var import_createContextHook = require("./utils/createContextHook.cjs");
var import_createContextStoreHook = require("./utils/createContextStoreHook.cjs");
var ThreadContext = (0, import_react.createContext)(null);
var useThreadContext = (0, import_createContextHook.createContextHook)(
  ThreadContext,
  "AssistantRuntimeProvider"
);
function useThreadRuntime(options) {
  const context = useThreadContext(options);
  if (!context) return null;
  return context.useThreadRuntime();
}
var actions = (0, import_createContextStoreHook.createContextStoreHook)(
  useThreadContext,
  "useThreadActions"
);
var useThreadActionsStore = actions.useThreadActionsStore;
var useThreadActions = actions.useThreadActions;
var useThreadRuntimeStore = useThreadActionsStore;
var { useThread, useThreadStore } = (0, import_createContextStoreHook.createContextStoreHook)(
  useThreadContext,
  "useThread"
);
var messages = (0, import_createContextStoreHook.createContextStoreHook)(useThreadContext, "useThreadMessages");
var useThreadMessages = messages.useThreadMessages;
var useThreadMessagesStore = messages.useThreadMessagesStore;
var {
  useComposer: useThreadComposer,
  useComposerStore: useThreadComposerStore
} = (0, import_createContextStoreHook.createContextStoreHook)(useThreadContext, "useComposer");
var {
  useViewport: useThreadViewport,
  useViewportStore: useThreadViewportStore
} = (0, import_createContextStoreHook.createContextStoreHook)(useThreadContext, "useViewport");
function useThreadModelConfig(options) {
  const [, rerender] = (0, import_react.useState)({});
  const runtime = useThreadRuntime(options);
  (0, import_react.useEffect)(() => {
    return runtime?.unstable_on("model-config-update", () => rerender({}));
  }, [runtime]);
  if (!runtime) return null;
  return runtime?.getModelConfig();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThreadContext,
  actions,
  useThread,
  useThreadActions,
  useThreadActionsStore,
  useThreadComposer,
  useThreadComposerStore,
  useThreadContext,
  useThreadMessages,
  useThreadMessagesStore,
  useThreadModelConfig,
  useThreadRuntime,
  useThreadRuntimeStore,
  useThreadStore,
  useThreadViewport,
  useThreadViewportStore
});
//# sourceMappingURL=ThreadContext.js.map