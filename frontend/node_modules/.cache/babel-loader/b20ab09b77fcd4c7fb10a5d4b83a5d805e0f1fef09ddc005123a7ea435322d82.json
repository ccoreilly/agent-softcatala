{"ast":null,"code":"const SESSIONS_KEY = 'chat-sessions';\nconst CURRENT_SESSION_KEY = 'current-session-id';\nexport const storage = {\n  // Get all sessions\n  getSessions() {\n    try {\n      const data = localStorage.getItem(SESSIONS_KEY);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Error loading sessions:', error);\n      return [];\n    }\n  },\n  // Save all sessions\n  saveSessions(sessions) {\n    try {\n      localStorage.setItem(SESSIONS_KEY, JSON.stringify(sessions));\n    } catch (error) {\n      console.error('Error saving sessions:', error);\n    }\n  },\n  // Get specific session\n  getSession(id) {\n    const sessions = this.getSessions();\n    return sessions.find(session => session.id === id);\n  },\n  // Create new session\n  createSession(name) {\n    const session = {\n      id: crypto.randomUUID(),\n      name,\n      messages: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    const sessions = this.getSessions();\n    sessions.unshift(session); // Add to beginning\n    this.saveSessions(sessions);\n    return session;\n  },\n  // Update session\n  updateSession(id, updates) {\n    const sessions = this.getSessions();\n    const index = sessions.findIndex(session => session.id === id);\n    if (index !== -1) {\n      sessions[index] = {\n        ...sessions[index],\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n      this.saveSessions(sessions);\n    }\n  },\n  // Add message to session\n  addMessage(sessionId, message) {\n    const sessions = this.getSessions();\n    const session = sessions.find(s => s.id === sessionId);\n    if (session) {\n      session.messages.push(message);\n      session.updatedAt = new Date().toISOString();\n      this.saveSessions(sessions);\n    }\n  },\n  // Delete session\n  deleteSession(id) {\n    const sessions = this.getSessions();\n    const filteredSessions = sessions.filter(session => session.id !== id);\n    this.saveSessions(filteredSessions);\n\n    // Clear current session if it was deleted\n    if (this.getCurrentSessionId() === id) {\n      this.setCurrentSessionId(null);\n    }\n  },\n  // Current session management\n  getCurrentSessionId() {\n    return localStorage.getItem(CURRENT_SESSION_KEY);\n  },\n  setCurrentSessionId(id) {\n    if (id) {\n      localStorage.setItem(CURRENT_SESSION_KEY, id);\n    } else {\n      localStorage.removeItem(CURRENT_SESSION_KEY);\n    }\n  },\n  // Clear all data\n  clearAll() {\n    localStorage.removeItem(SESSIONS_KEY);\n    localStorage.removeItem(CURRENT_SESSION_KEY);\n  },\n  // Export sessions for backup\n  exportSessions() {\n    const sessions = this.getSessions();\n    return JSON.stringify(sessions, null, 2);\n  },\n  // Import sessions from backup\n  importSessions(data) {\n    try {\n      const sessions = JSON.parse(data);\n      if (Array.isArray(sessions)) {\n        this.saveSessions(sessions);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error importing sessions:', error);\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["SESSIONS_KEY","CURRENT_SESSION_KEY","storage","getSessions","data","localStorage","getItem","JSON","parse","error","console","saveSessions","sessions","setItem","stringify","getSession","id","find","session","createSession","name","crypto","randomUUID","messages","createdAt","Date","toISOString","updatedAt","unshift","updateSession","updates","index","findIndex","addMessage","sessionId","message","s","push","deleteSession","filteredSessions","filter","getCurrentSessionId","setCurrentSessionId","removeItem","clearAll","exportSessions","importSessions","Array","isArray"],"sources":["/workspace/frontend/src/utils/storage.ts"],"sourcesContent":["import { ChatSession, ChatMessage } from '../types';\n\nconst SESSIONS_KEY = 'chat-sessions';\nconst CURRENT_SESSION_KEY = 'current-session-id';\n\nexport const storage = {\n  // Get all sessions\n  getSessions(): ChatSession[] {\n    try {\n      const data = localStorage.getItem(SESSIONS_KEY);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Error loading sessions:', error);\n      return [];\n    }\n  },\n\n  // Save all sessions\n  saveSessions(sessions: ChatSession[]): void {\n    try {\n      localStorage.setItem(SESSIONS_KEY, JSON.stringify(sessions));\n    } catch (error) {\n      console.error('Error saving sessions:', error);\n    }\n  },\n\n  // Get specific session\n  getSession(id: string): ChatSession | undefined {\n    const sessions = this.getSessions();\n    return sessions.find(session => session.id === id);\n  },\n\n  // Create new session\n  createSession(name: string): ChatSession {\n    const session: ChatSession = {\n      id: crypto.randomUUID(),\n      name,\n      messages: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const sessions = this.getSessions();\n    sessions.unshift(session); // Add to beginning\n    this.saveSessions(sessions);\n\n    return session;\n  },\n\n  // Update session\n  updateSession(id: string, updates: Partial<ChatSession>): void {\n    const sessions = this.getSessions();\n    const index = sessions.findIndex(session => session.id === id);\n    \n    if (index !== -1) {\n      sessions[index] = {\n        ...sessions[index],\n        ...updates,\n        updatedAt: new Date().toISOString(),\n      };\n      this.saveSessions(sessions);\n    }\n  },\n\n  // Add message to session\n  addMessage(sessionId: string, message: ChatMessage): void {\n    const sessions = this.getSessions();\n    const session = sessions.find(s => s.id === sessionId);\n    \n    if (session) {\n      session.messages.push(message);\n      session.updatedAt = new Date().toISOString();\n      this.saveSessions(sessions);\n    }\n  },\n\n  // Delete session\n  deleteSession(id: string): void {\n    const sessions = this.getSessions();\n    const filteredSessions = sessions.filter(session => session.id !== id);\n    this.saveSessions(filteredSessions);\n\n    // Clear current session if it was deleted\n    if (this.getCurrentSessionId() === id) {\n      this.setCurrentSessionId(null);\n    }\n  },\n\n  // Current session management\n  getCurrentSessionId(): string | null {\n    return localStorage.getItem(CURRENT_SESSION_KEY);\n  },\n\n  setCurrentSessionId(id: string | null): void {\n    if (id) {\n      localStorage.setItem(CURRENT_SESSION_KEY, id);\n    } else {\n      localStorage.removeItem(CURRENT_SESSION_KEY);\n    }\n  },\n\n  // Clear all data\n  clearAll(): void {\n    localStorage.removeItem(SESSIONS_KEY);\n    localStorage.removeItem(CURRENT_SESSION_KEY);\n  },\n\n  // Export sessions for backup\n  exportSessions(): string {\n    const sessions = this.getSessions();\n    return JSON.stringify(sessions, null, 2);\n  },\n\n  // Import sessions from backup\n  importSessions(data: string): boolean {\n    try {\n      const sessions = JSON.parse(data);\n      if (Array.isArray(sessions)) {\n        this.saveSessions(sessions);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error importing sessions:', error);\n      return false;\n    }\n  },\n};"],"mappings":"AAEA,MAAMA,YAAY,GAAG,eAAe;AACpC,MAAMC,mBAAmB,GAAG,oBAAoB;AAEhD,OAAO,MAAMC,OAAO,GAAG;EACrB;EACAC,WAAWA,CAAA,EAAkB;IAC3B,IAAI;MACF,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAACN,YAAY,CAAC;MAC/C,OAAOI,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,EAAE;IACrC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAE,YAAYA,CAACC,QAAuB,EAAQ;IAC1C,IAAI;MACFP,YAAY,CAACQ,OAAO,CAACb,YAAY,EAAEO,IAAI,CAACO,SAAS,CAACF,QAAQ,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED;EACAM,UAAUA,CAACC,EAAU,EAA2B;IAC9C,MAAMJ,QAAQ,GAAG,IAAI,CAACT,WAAW,CAAC,CAAC;IACnC,OAAOS,QAAQ,CAACK,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC;EACpD,CAAC;EAED;EACAG,aAAaA,CAACC,IAAY,EAAe;IACvC,MAAMF,OAAoB,GAAG;MAC3BF,EAAE,EAAEK,MAAM,CAACC,UAAU,CAAC,CAAC;MACvBF,IAAI;MACJG,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED,MAAMd,QAAQ,GAAG,IAAI,CAACT,WAAW,CAAC,CAAC;IACnCS,QAAQ,CAACgB,OAAO,CAACV,OAAO,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACP,YAAY,CAACC,QAAQ,CAAC;IAE3B,OAAOM,OAAO;EAChB,CAAC;EAED;EACAW,aAAaA,CAACb,EAAU,EAAEc,OAA6B,EAAQ;IAC7D,MAAMlB,QAAQ,GAAG,IAAI,CAACT,WAAW,CAAC,CAAC;IACnC,MAAM4B,KAAK,GAAGnB,QAAQ,CAACoB,SAAS,CAACd,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC;IAE9D,IAAIe,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBnB,QAAQ,CAACmB,KAAK,CAAC,GAAG;QAChB,GAAGnB,QAAQ,CAACmB,KAAK,CAAC;QAClB,GAAGD,OAAO;QACVH,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MACD,IAAI,CAACf,YAAY,CAACC,QAAQ,CAAC;IAC7B;EACF,CAAC;EAED;EACAqB,UAAUA,CAACC,SAAiB,EAAEC,OAAoB,EAAQ;IACxD,MAAMvB,QAAQ,GAAG,IAAI,CAACT,WAAW,CAAC,CAAC;IACnC,MAAMe,OAAO,GAAGN,QAAQ,CAACK,IAAI,CAACmB,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKkB,SAAS,CAAC;IAEtD,IAAIhB,OAAO,EAAE;MACXA,OAAO,CAACK,QAAQ,CAACc,IAAI,CAACF,OAAO,CAAC;MAC9BjB,OAAO,CAACS,SAAS,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC5C,IAAI,CAACf,YAAY,CAACC,QAAQ,CAAC;IAC7B;EACF,CAAC;EAED;EACA0B,aAAaA,CAACtB,EAAU,EAAQ;IAC9B,MAAMJ,QAAQ,GAAG,IAAI,CAACT,WAAW,CAAC,CAAC;IACnC,MAAMoC,gBAAgB,GAAG3B,QAAQ,CAAC4B,MAAM,CAACtB,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC;IACtE,IAAI,CAACL,YAAY,CAAC4B,gBAAgB,CAAC;;IAEnC;IACA,IAAI,IAAI,CAACE,mBAAmB,CAAC,CAAC,KAAKzB,EAAE,EAAE;MACrC,IAAI,CAAC0B,mBAAmB,CAAC,IAAI,CAAC;IAChC;EACF,CAAC;EAED;EACAD,mBAAmBA,CAAA,EAAkB;IACnC,OAAOpC,YAAY,CAACC,OAAO,CAACL,mBAAmB,CAAC;EAClD,CAAC;EAEDyC,mBAAmBA,CAAC1B,EAAiB,EAAQ;IAC3C,IAAIA,EAAE,EAAE;MACNX,YAAY,CAACQ,OAAO,CAACZ,mBAAmB,EAAEe,EAAE,CAAC;IAC/C,CAAC,MAAM;MACLX,YAAY,CAACsC,UAAU,CAAC1C,mBAAmB,CAAC;IAC9C;EACF,CAAC;EAED;EACA2C,QAAQA,CAAA,EAAS;IACfvC,YAAY,CAACsC,UAAU,CAAC3C,YAAY,CAAC;IACrCK,YAAY,CAACsC,UAAU,CAAC1C,mBAAmB,CAAC;EAC9C,CAAC;EAED;EACA4C,cAAcA,CAAA,EAAW;IACvB,MAAMjC,QAAQ,GAAG,IAAI,CAACT,WAAW,CAAC,CAAC;IACnC,OAAOI,IAAI,CAACO,SAAS,CAACF,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;EAC1C,CAAC;EAED;EACAkC,cAAcA,CAAC1C,IAAY,EAAW;IACpC,IAAI;MACF,MAAMQ,QAAQ,GAAGL,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;MACjC,IAAI2C,KAAK,CAACC,OAAO,CAACpC,QAAQ,CAAC,EAAE;QAC3B,IAAI,CAACD,YAAY,CAACC,QAAQ,CAAC;QAC3B,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,KAAK;IACd;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}